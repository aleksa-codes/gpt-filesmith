---
import '../styles/global.css';
import { Icon } from 'astro-icon/components';

const title = 'GPT FileSmith';

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    let path = data.get('path') as string;

    if (!path.startsWith('/')) {
      path = `/${path}`;
    }

    return Astro.redirect(path);
  } catch (error) {
    console.error(error);
  }
}
---

<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <meta
      name='description'
      content='GPT FileSmith is a dynamic file generator powered by GPT-4. Enter any URL or file path to instantly create HTML, CSS, JavaScript, JSON files, and more. Default to HTML if no file type is specified. Built with Astro, Tailwind CSS, and deployed on Cloudflare Pages for fast performance and seamless file generation.'
    />
    <link rel='icon' type='image/x-icon' href='/favicon.ico' />
    <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
    <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
    <title>{title}</title>
  </head>
  <body class='flex h-screen items-center justify-center bg-gradient-to-br from-purple-600 to-indigo-800 p-4'>
    <a
      href='https://github.com/aleksa-codes/gpt-filesmith'
      target='_blank'
      rel='noopener noreferrer'
      class='github-corner'
      aria-label='View source on GitHub'
      ><svg
        width='80'
        height='80'
        viewBox='0 0 250 250'
        class='absolute left-0 top-0 scale-x-[-1] fill-[#151513] text-white'
        aria-hidden='true'
        ><path d='M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'></path><path
          d='M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2'
          fill='currentColor'
          class='octo-arm origin-[130px_106px]'></path><path
          d='M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z'
          fill='currentColor'
          class='octo-body'></path></svg
      ></a
    >
    <!-- Notification Toast -->
    <div
      id='notification'
      class='fixed left-1/2 top-4 z-50 hidden -translate-x-1/2 transform rounded-lg p-4 text-center text-white shadow-lg duration-200'
    >
    </div>

    <!-- API Key Modal -->
    <div id='apiKeyModal' class='fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm'>
      <div class='mx-4 w-full max-w-md rounded-2xl bg-white p-6 shadow-2xl'>
        <div class='mb-4 flex items-center justify-between'>
          <h2 class='text-xl font-bold text-gray-800'>Set API Key</h2>
          <button id='closeModal' class='text-gray-500 hover:text-gray-700'>
            <Icon name='lucide:x' class='h-6 w-6' />
          </button>
        </div>

        <div class='space-y-4'>
          <div class='space-y-2'>
            <label class='block text-sm font-medium text-gray-700'> OpenAI API Key </label>
            <input
              name='apiKey'
              type='password'
              id='apiKey'
              class='w-full rounded-lg border border-gray-300 px-4 py-2 shadow-sm transition duration-200 focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500/50'
              placeholder='sk-...'
              required
            />
            <div id='apiKeyError' class='mt-1 hidden text-sm text-red-600'></div>
          </div>

          <div class='rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-800'>
            <p class='flex items-start gap-2'>
              <Icon name='lucide:shield' class='mt-0.5 h-5 w-5 flex-shrink-0' />
              Your API key is securely stored in the browser's local storage and is only used for OpenAI API requests.
            </p>
          </div>

          <button
            id='saveApiKey'
            class='w-full rounded-lg bg-purple-600 px-4 py-2 font-medium text-white shadow-lg transition duration-200 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:ring-offset-2'
          >
            Save API Key
          </button>
        </div>
      </div>
    </div>

    <main class='w-full max-w-2xl'>
      <div class='w-full space-y-6 rounded-2xl bg-white/95 p-8 shadow-2xl backdrop-blur'>
        <div class='text-center'>
          <h1 class='bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-4xl font-bold text-transparent'>
            {title}
          </h1>
          <p class='mt-2 text-gray-600'>Generate files dynamically with AI</p>
        </div>

        <!-- API Key Status -->
        <div id='apiKeyStatus' class='hidden'>
          <div class='flex items-center justify-between rounded-lg bg-gray-50 p-4 shadow-sm'>
            <div class='flex items-center gap-2'>
              <Icon name='lucide:check-circle' class='h-5 w-5 text-green-600' />
              <span class='text-sm text-gray-600'>
                API Key is set <span class='text-red-600'>(Don't forget to remove it later)</span>
              </span>
            </div>
            <div class='flex gap-2'>
              <button
                id='editApiKey'
                class='flex items-center gap-1 rounded-lg px-2 py-1 text-sm text-gray-600 hover:bg-gray-100'
              >
                <Icon name='lucide:edit' class='h-4 w-4' />
                Edit
              </button>
              <button
                id='removeApiKey'
                class='flex items-center gap-1 rounded-lg px-2 py-1 text-sm text-red-600 hover:bg-red-50'
              >
                <Icon name='lucide:trash-2' class='h-4 w-4' />
                Remove
              </button>
            </div>
          </div>
        </div>

        <!-- Set API Key Button -->
        <button
          id='showApiKeyModalBtn'
          class='w-full rounded-lg border border-purple-200 bg-purple-50 px-4 py-3 text-purple-700 shadow-sm transition duration-200 hover:bg-purple-100'
        >
          <div class='flex items-center justify-center gap-2'>
            <Icon name='lucide:key' class='h-5 w-5' />
            <span>Set API Key</span>
          </div>
        </button>

        <!-- Path Form -->
        <form method='POST' class='space-y-6'>
          <div class='space-y-2'>
            <label for='path' class='block text-sm font-medium text-gray-700'> Enter Path </label>
            <div class='relative'>
              <Icon name='lucide:folder' class='absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400' />
              <input
                type='text'
                name='path'
                id='path'
                class='w-full rounded-lg border border-gray-300 px-4 py-2 pl-10 shadow-sm transition duration-200 focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500/50'
                placeholder='/pokemon/charizard.html'
                required
              />
            </div>
          </div>

          <div class='rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-800'>
            <p class='flex items-start gap-2'>
              <Icon name='lucide:info' class='mt-0.5 h-5 w-5 flex-shrink-0' />
              <span>
                To generate a file you can also just add a path with an extension to this URL. For example, try adding <code
                  class='rounded bg-blue-100 px-1.5 py-0.5'>/example.html</code
                > at the end of the address in your browserâ€™s URL bar. Supported file types include HTML, CSS, JavaScript,
                JSON, and more.
              </span>
            </p>
          </div>

          <button
            type='submit'
            id='generateBtn'
            class='w-full rounded-lg bg-gradient-to-r from-purple-600 to-indigo-600 px-4 py-3 font-medium text-white shadow-lg transition duration-200 hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 disabled:hover:from-purple-600 disabled:hover:to-indigo-600'
          >
            <div class='flex items-center justify-center gap-2'>
              <Icon name='lucide:wand-2' class='h-5 w-5' />
              <span>Visit Path</span>
            </div>
          </button>
        </form>
      </div>
    </main>

    <script>
      // Initialize on load
      document.addEventListener('DOMContentLoaded', async () => {
        try {
          const response = await fetch('/api/get-cookie', {
            method: 'GET',
          });
          if (!response.ok) {
            throw new Error('API key retrieval failed');
          }
          const { apiKey } = await response.json();
          if (apiKey) {
            updateApiKeyUI(apiKey);
          } else {
            updateApiKeyUI(null);
          }
        } catch (error) {
          console.error('Error retrieving API key:', error);
          updateApiKeyUI(null);
        }
      });

      // UI Elements
      const apiKeyModal = document.getElementById('apiKeyModal');
      const showApiKeyModalBtn = document.getElementById('showApiKeyModalBtn');
      const closeModalBtn = document.getElementById('closeModal');
      const apiKeyInput = document.getElementById('apiKey');
      const saveApiKeyBtn = document.getElementById('saveApiKey');
      const editApiKeyBtn = document.getElementById('editApiKey');
      const removeApiKeyBtn = document.getElementById('removeApiKey');
      const notificationEl = document.getElementById('notification');

      // Modal Controls
      showApiKeyModalBtn?.addEventListener('click', () => {
        apiKeyModal?.classList.remove('hidden');
        apiKeyModal?.classList.add('flex');
      });

      const closeModal = () => {
        apiKeyModal?.classList.add('hidden');
        apiKeyModal?.classList.remove('flex');
      };

      closeModalBtn?.addEventListener('click', closeModal);
      apiKeyModal?.addEventListener('click', (e) => {
        if (e.target === apiKeyModal) {
          closeModal();
        }
      });

      // Edit API Key
      editApiKeyBtn?.addEventListener('click', () => {
        apiKeyModal?.classList.remove('hidden');
        apiKeyModal?.classList.add('flex');
      });

      // Save API Key
      saveApiKeyBtn?.addEventListener('click', async (e) => {
        e.preventDefault();
        const apiKey = (apiKeyInput as HTMLInputElement)?.value;
        const apiKeyError = document.getElementById('apiKeyError');

        // Validate API key format
        const isValidApiKey = /^sk-[a-zA-Z0-9-_]{1,250}$/.test(apiKey);

        if (!isValidApiKey) {
          if (apiKeyError) {
            apiKeyError.textContent =
              'Invalid API key format. Must start with "sk-" followed by letters, numbers, hyphens, or underscores.';
            apiKeyError.classList.remove('hidden');
          }
          return;
        }

        if (apiKeyError) {
          apiKeyError.classList.add('hidden');
        }

        if (apiKey) {
          try {
            const response = await fetch('/api/set-cookie', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ apiKey }),
            });
            if (!response.ok) {
              throw new Error('API key save failed');
            }
            closeModal();
            updateApiKeyUI(apiKey);
            showNotification('API key saved successfully!', 'success');
          } catch (error) {
            console.error('Error saving API key:', error);
            showNotification('Failed to save API key', 'error');
          }
        }
      });

      // Remove API Key
      removeApiKeyBtn?.addEventListener('click', async (e) => {
        e.preventDefault();
        try {
          const response = await fetch('/api/delete-cookie', {
            method: 'DELETE',
          });

          if (!response.ok) {
            throw new Error('API key removal failed');
          }
          updateApiKeyUI(null);
          showNotification('API key removed successfully!', 'success');
        } catch (error) {
          console.error('Error removing API key:', error);
          showNotification('Failed to remove API key', 'error');
        }
      });

      // Helper Functions
      function updateApiKeyUI(apiKey: string | null) {
        const showApiKeyModalBtn = document.getElementById('showApiKeyModalBtn');
        const apiKeyStatus = document.getElementById('apiKeyStatus');
        const generateBtn = document.getElementById('generateBtn'); // New line to select the button

        if (apiKey) {
          (apiKeyInput as HTMLInputElement).value = apiKey;
          showApiKeyModalBtn?.classList.add('hidden');
          apiKeyStatus?.classList.remove('hidden');
          apiKeyStatus?.classList.add('block');
          (generateBtn as HTMLButtonElement).disabled = false;
        } else {
          showApiKeyModalBtn?.classList.remove('hidden');
          showApiKeyModalBtn?.classList.add('block');
          apiKeyStatus?.classList.add('hidden');
          apiKeyStatus?.classList.remove('block');
          (generateBtn as HTMLButtonElement).disabled = true;
          if (apiKeyInput) {
            (apiKeyInput as HTMLInputElement).value = '';
          }
        }
      }

      function showNotification(message: string, type: 'success' | 'error') {
        if (!notificationEl) return;

        const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
        notificationEl.textContent = message;
        notificationEl.className = `fixed top-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg text-white text-center min-w-[300px] z-50 ${bgColor} shadow-lg`;
        notificationEl.classList.remove('hidden');

        setTimeout(() => {
          notificationEl.classList.add('hidden');
        }, 3000);
      }
    </script>
  </body>
</html>
