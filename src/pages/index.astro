---
import '../styles/global.css';
const title = 'GPT FileSmith';

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    let path = data.get('path') as string;
    const apiKey = data.get('apiKey') as string;
    console.log('API key:', apiKey);

    if (!path.startsWith('/')) {
      path = `/${path}`;
    }

    return Astro.redirect(path);
  } catch (error) {
    console.error(error);
  }
}
---

<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <meta
      name='description'
      content='GPT FileSmith is a dynamic file generator powered by GPT-4o. Enter any URL or file path to instantly create HTML, CSS, JavaScript, JSON files, and more. Default to HTML if no file type is specified. Built with Astro, Tailwind CSS, and deployed on Cloudflare Pages for fast performance and seamless file generation.'
    />
    <link rel='icon' type='image/x-icon' href='/favicon.ico' />
    <title>{title}</title>
  </head>
  <body class='flex min-h-screen items-center justify-center bg-gradient-to-br from-purple-600 to-indigo-800'>
    <a
      href='https://github.com/aleksa-codes/gpt-filesmith'
      target='_blank'
      rel='noopener noreferrer'
      class='github-corner'
      aria-label='View source on GitHub'
      ><svg
        width='80'
        height='80'
        viewBox='0 0 250 250'
        class='absolute left-0 top-0 scale-x-[-1] fill-[#151513] text-white'
        aria-hidden='true'
        ><path d='M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'></path><path
          d='M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2'
          fill='currentColor'
          class='octo-arm origin-[130px_106px]'></path><path
          d='M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z'
          fill='currentColor'
          class='octo-body'></path></svg
      ></a
    >
    <div class='mx-auto max-w-2xl space-y-6'>
      <!-- Notification Banner -->
      <div
        id='notification'
        class='fixed left-1/2 top-4 z-50 hidden min-w-[300px] -translate-x-1/2 transform rounded-lg p-4 text-center text-white'
      >
      </div>

      <div class='rounded-lg bg-white/95 p-8 shadow-xl backdrop-blur'>
        <h1 class='mb-8 text-center text-3xl font-bold text-purple-800'>
          {title}
        </h1>

        <!-- Path Form -->
        <form method='POST' class='space-y-4'>
          <!-- API Key Section -->
          <div id='apiKeySection' class='mb-8'>
            <div id='apiKeyForm' class='space-y-4'>
              <div class='space-y-2'>
                <label class='block text-sm font-medium text-gray-700'> OpenAI API Key </label>
                <input
                  name='apiKey'
                  type='password'
                  id='apiKey'
                  class='w-full rounded-lg border px-4 py-2 focus:border-transparent focus:ring-2 focus:ring-purple-500'
                  placeholder='sk-...'
                  required
                />
              </div>
              <div class='rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-800'>
                Your API key is securely stored in the browser's local storage (cookies) and is only utilized when
                making requests to OpenAI via their official SDK. Rest assured that your key is not transmitted to any
                external server except when interacting with OpenAI's services.
              </div>
              <button
                id='saveApiKey'
                class='w-full rounded-lg bg-purple-600 px-4 py-2 text-white transition duration-200 hover:bg-purple-700'
              >
                Save API Key
              </button>
            </div>

            <div id='apiKeyStatus' class='hidden items-center justify-between rounded-lg bg-gray-50 p-3'>
              <div class='flex items-center gap-2'>
                <svg class='h-5 w-5 text-green-600' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                  <path
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    stroke-width='2'
                    d='M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z'
                  ></path>
                </svg>
                <div class='text-sm text-gray-600'>
                  API Key is set <span class='text-red-600'>(Don't forget to remove it later)</span>
                </div>
              </div>
              <button id='removeApiKey' class='flex items-center gap-1 text-sm text-red-600 hover:text-red-700'>
                <svg class='h-4 w-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                  <path
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    stroke-width='2'
                    d='M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16'
                  ></path>
                </svg>
                Remove
              </button>
            </div>
          </div>
          <div class='space-y-2'>
            <label for='path' class='block text-sm font-medium text-gray-700'> Enter Path </label>
            <input
              type='text'
              name='path'
              id='path'
              class='w-full rounded-lg border px-4 py-2 focus:border-transparent focus:ring-2 focus:ring-purple-500'
              placeholder='/pokemon/charizard.html'
              required
            />
          </div>
          <div class='rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-800'>
            You can also enter a path directly in the browser's address bar or search box. For example, type a path with
            an extension like <code>/example.html</code> after the website's URL, and GPT will generate content based on
            the file type. Supported types include HTML, CSS, JavaScript, JSON, and more.
          </div>
          <button
            type='submit'
            id='generateBtn'
            class='w-full rounded-lg bg-gradient-to-r from-purple-600 to-indigo-600 px-4 py-2 text-white transition duration-200 hover:from-purple-700 hover:to-indigo-700'
          >
            Generate File
          </button>
        </form>
      </div>
    </div>

    <script>
      // Initialize on load
      document.addEventListener('DOMContentLoaded', async () => {
        // GET request to get cookie
        try {
          const response = await fetch('/api/get-cookie', {
            method: 'GET',
          });
          if (!response.ok) {
            throw new Error('API key retrieval failed');
          }
          const { apiKey } = await response.json();
          if (apiKey) {
            updateApiKeyUI(apiKey);
          }
        } catch (error) {
          console.error('Error retrieving API key:', error);
        }
      });

      // API Key UI Elements
      const apiKeyForm = document.getElementById('apiKeyForm');
      const apiKeyStatus = document.getElementById('apiKeyStatus');
      const apiKeyInput = document.getElementById('apiKey');
      const saveApiKeyBtn = document.getElementById('saveApiKey');
      const removeApiKeyBtn = document.getElementById('removeApiKey');
      const notificationEl = document.getElementById('notification');

      // Save API Key
      saveApiKeyBtn?.addEventListener('click', async (e) => {
        e.preventDefault();
        const apiKey = (apiKeyInput as HTMLInputElement)?.value;
        if (apiKey) {
          try {
            const response = await fetch('/api/set-cookie', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ apiKey }),
            });
            if (!response.ok) {
              throw new Error('API key save failed');
            }
          } catch (error) {
            console.error('Error saving API key:', error);
            return;
          }

          updateApiKeyUI(apiKey);
          showNotification('API key saved successfully!', 'success');
        }
      });

      // Remove API Key
      removeApiKeyBtn?.addEventListener('click', async (e) => {
        e.preventDefault();
        try {
          const response = await fetch('/api/delete-cookie', {
            method: 'DELETE',
          });

          if (!response.ok) {
            throw new Error('API key removal failed');
          }
        } catch (error) {
          console.error('Error removing API key:', error);
        }

        updateApiKeyUI(null);
        showNotification('API key removed successfully!', 'success');
      });

      // Helper Functions
      function updateApiKeyUI(apiKey: string | null) {
        if (apiKey) {
          (apiKeyInput as HTMLInputElement).value = apiKey;
          apiKeyForm?.classList.add('hidden');
          apiKeyStatus?.classList.remove('hidden');
          apiKeyStatus?.classList.add('flex');
        } else {
          apiKeyForm?.classList.remove('hidden');
          apiKeyStatus?.classList.add('hidden');
          apiKeyStatus?.classList.remove('flex');
          if (apiKeyInput) {
            (apiKeyInput as HTMLInputElement).value = '';
          }
        }
      }

      function showNotification(message: string, type: 'success' | 'error') {
        if (!notificationEl) return;

        notificationEl.textContent = message;
        notificationEl.className = `fixed top-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg text-white text-center min-w-[300px] z-50 ${
          type === 'success' ? 'bg-green-500' : 'bg-red-500'
        }`;
        notificationEl.classList.remove('hidden');

        setTimeout(() => {
          notificationEl.classList.add('hidden');
        }, 3000);
      }
    </script>
  </body>
</html>
